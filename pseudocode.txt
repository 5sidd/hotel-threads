int currentRoomNumber = 0; // keep track of the current room number
int guestThreadsCreated = 0; // keep track of the number of guest threads created
int frontDeskThreadsCreated = 0; // keep track of the number of front desk employee threads created
int bellhopThreadsCreated = 0; // keep track of the number of bellhop threads created
int guestsEntered = 0; // keep track of the number of guest threads who entered the hotel

queue q1;
queue q2;

semaphore frontDeskAvailability = 2; // how many front desk employees are available
semaphore guestRequestedRoom = 0; // indicates if a customer requested the front desk for a room
semaphore mutex2 = 1; // enforces mutual exclusion when processing a task on q1
semaphore mutex3 = 1; // enforces mutual exlusion when incrementing number of guest threads created
semaphore mutex4 = 1; // enforces mutual exclusion when incrementing number of front desk employee threads created
semaphore mutex5 = 1; // enforces mutual exclusion when incrementing number of guest threads who entered the hotel
semaphore mutex6 = 1; // enforces mutual exclusion when incrementing number of bellhop threads created
semaphore mutex7 = 1; // enforces mutual exclusion when processing a task on q2
semaphore finishedCreatingGuests = 0; // indicates when all guest threads have been created
semaphore finishedCreatingFrontDesk = 0; // indicates when all front desk employee threads have been created (for guest threads)
semaphore finishedCreatingFrontDesk2 = 0; // indicates when all front desk employee threads have been created (for bellhop threads)
semaphore finishedCreatingBellhops = 0; // indicates when all bellhop threads have been created
semaphore finishedEnteringHotel = 0; // indicates when all guest threads have entered the hotel
semaphores deskIsProvidingKey[25]; // indicates if a front desk employee is providing a key to a guest
semaphores guestReceivedKey[25]; // indicates if a guest received a key by the front desk
semaphore requestHelpFromBellhop = 0; // indicates if a guest is requesting help from a bellhop to carry bags
semaphore bellhopAvailability = 2; // how many bellhops are available
semaphores bagsTakenByBellhop[25]; // indicates when a bellhop takes the bags of a guest who requested bellhop service
semaphores guestReachedRoom[25]; // indicates to the bellhops when a guest being serviced has entered the assigned room
semaphores bagsDelivered[25]; // indicates to the guests when the bags have been delivered
semaphores tipGiven[25]; // indicates to bellhops when a guest is giving a tip
semaphores tipAccepted[25]; // indicates to the guests when a bellhop accepts a tip from the guest
    
guest(guestID) {
    printGuestThreadCreated(guestID);
    
    // Increment the guest threads created count and inform front desk threads if all guests have been created
    wait(mutex3);
    guestThreadsCreated += 1;
    if (guestThreadsCreated == 25) {
        signal(finishedCreatingGuests);
        signal(finishedCreatingGuests);
    }
    signal(mutex3);
    
    // assign a random bag amount between 1-5 to the guest
    int bagAmount = assignBagAmount();
    
    // Wait until all front desk and bellhop threads have been created
    wait(finishedCreatingFrontDesk);
    wait(finishedCreatingBellhops);
    
    // Enter the hotel and increment the number of guests who entered the hotel
    enterHotel();
    wait(mutex5);
    guestsEntered += 1;
    if (guestsEntered == 25) {
        // Inform the front desk threads that all guests have entered the hotel
        signal(finishedEnteringHotel);
        signal(finishedEnteringHotel);
    }
    signal(mutex5);
    
    // Wait until the front desk is available and request a room
    wait(frontDeskAvailability);
    wait(mutex2);
    q1.enqueue(guestID);
    requestRoom();
    signal(guestRequestedRoom);
    signal(mutex2);
    
    // Wait until front desk provides a key to the guest and take it
    wait(deskIsProvidingKey[guestID]);
    recieveKey();
    // Inform front desk that this guest received the key
    signal(guestReceivedKey[guestID]);
    
    if (bagAmount > 2) {
        // Guest needs bellhop help
        
        // Wait until a bellhop is available and request for help
        wait(bellhopAvailability);
        wait(mutex7);
        q2.enqueue(guestID);
        requestBellhop();
        signal(requestHelpFromBellhop);
        signal(mutex7);
        
        // Wait until bellhop takes the bags off the guest
        wait(bagsTakenByBellhop[guestID]);
        
        // Enter assigned room and inform bellhop
        enterAssignedRoom();
        signal(guestReachedRoom[guestID]);
        
        // Wait until bellhop delivers bags and provide tip
        wait(bagsDelivered[guestID]);
        provideTip();
        signal(tipGiven[guestID]);
        
        // Wait until bellhop takes the tip and retire
        wait(tipAccepted[guestID]);
        retire();
    }
    else {
        enterAssignedRoom();
        retire();
    }
}

frontDesk(frontDeskID) {
    // Wait until all guest threads are created
    wait(finishedCreatingGuests);
    printFrontDeskEmployeeThreadCreated(frontDeskID);
    
    // Increment the front desk threads created count and inform guest and bellhop threads if all guests have been created
    wait(mutex4);
    frontDeskThreadsCreated += 1;
    if (frontDeskThreadsCreated == 2) {
        for i = 1 to i = 25 {
            signal(finishedCreatingFrontDesk);
            if (i <= 2) {
                signal(finishedCreatingFrontDesk2);
            }
        }
    }
    signal(mutex4);
    
    // Wait until all guest threads enter the hotel
    wait(finishedEnteringHotel);
    
    int guestNumber;
    int assignedRoom;
    
    while (true) {
        // Wait until guest requests for a room
        wait(guestRequestedRoom);
        
        // Assign a room to the guest
        wait(mutex2);
        q1.dequeue(guestNumber);
        currentRoomNumber += 1;
        assignedRoom = currentRoomNumber;
        signal(mutex2);
        
        registerGuest();
        assignRoom();
        
        // Provide the room key to the guest
        provideRoomKey();
        signal(deskIsProvidingKey[guestNumber]);
        
        // Wait until the guest receives the room key
        wait(guestReceivedKey[guestID]);
        
        // Front desk employee is ready to service another guest
        signal(frontDeskAvailability);
    }
}

bellhop(bellhopID) {
    // Wait until all front desk employee threads are created
    wait(finishedCreatingFrontDesk2);
    printBellhopThreadCreated(bellhopID);
    
    // Increment the bellhop thread created count and inform the guest threads when all bellhops are created
    wait(mutex6);
    bellhopThreadsCreated += 1;
    if (bellhopThreadsCreated == 2) {
        for i = 1 to i = 25 {
            signal(finishedCreatingBellhops);
        }
    }
    signal(mutex6);
    
    int guestNumber;
    
    while (true) {
        // Wait until a guest makes a request
        wait(requestHelpFromBellhop);
        
        // Get the guest number
        wait(mutex7);
        q2.dequeue(guestNumber);
        signal(mutex7);
        
        // Take the guest's bags
        takeBagsFromGuest();
        
        // Wait until guest reaches room and deliver bags
        wait(guestReachedRoom[guestNumber]);
        deliverBags();
        
        // Wait until guest gives a tip and accept the tip
        wait(tipGiven[guestNumber]);
        acceptTip();
        signal(tipAccepted[guestNumber]);
        
        // Bellhop is ready to service another guest
        signal(bellhopAvailability);
    }
}